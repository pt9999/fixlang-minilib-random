module SecureRandomTest;

import Minilib.Crypto.SecureRandom;
import Minilib.Functor.Pair;
import Minilib.Monad.Random;
import Minilib.Monad.State;
import Minilib.Monad.IO;
import Minilib.Trait.Rng;
import Minilib.Testing.UnitTest;

test_generate_U64: TestCase;
test_generate_U64 = (
    make_test("test_generate_U64") $ |_|
    let secure_random = *SecureRandom::make;
    let (secure_random, a) = *secure_random.generate_U64;
    let (secure_random, b) = *secure_random.generate_U64;
    println("(a,b)="+(a,b).to_string).lift;;
    // Values of `a` and `b` depends on /dev/urandom
    pure()
);

test_generate_bytes: TestCase;
test_generate_bytes = (
    make_table_test("test_generate_bytes",
        [
            0,
            1,
            512,
        ],
        |size|
        let secure_random = *SecureRandom::make;
        let (secure_random, bytes) = *secure_random.generate_bytes(size);
        assert_equal("size", size, bytes.get_size)
    )
);

test_monad_random: TestCase;
test_monad_random = (
    make_test("test_monad_random") $ |_|
    let secure_random = *SecureRandom::make;
    do {
        let a = *random_U64;
        let b = *random_U64;
        println("(a,b)="+(a,b).to_string).lift_io;;
        let a = *random_bytes(4);
        let b = *random_bytes(4);
        println("(a,b)="+(a,b).to_string).lift_io;;
        pure()
    }
    .eval_state_t(secure_random)
);

type Container = unbox struct {
    title: String,
    secure_random: SecureRandom
};

impl Container: Rng {
    type RngResult Container r = IOFail r;
    rng_U64 = act_secure_random(rng_U64 >> PairLT::make) >> PairLT::get;
    rng_bytes = |size| act_secure_random(rng_bytes(size) >> PairLT::make) >> PairLT::get;
}

test_container: TestCase;
test_container = (
    make_test("test_container") $ |_|
    let container = Container {
        title: "init",
        secure_random: *SecureRandom::make
    };
    let container: Container = *do {
        mod_state(set_title("started"));;
        let container: Container = *get_state;
        assert_equal("title", "started", container.@title).lift_iofail;;
        let u64_a: U64 = *random_U64;
        let u64_b: U64 = *random_U64;
        println("u64:" + (u64_a, u64_b).to_string).lift_io;;
        // If equal accidentally, change random seed
        assert_true("u64", u64_a != u64_b).lift_iofail;;
        mod_state(set_title("finished"));;
        pure()
    }.exec_state_t(container);
    assert_equal("title", "finished", container.@title);;
    pure()
);

main: IO ();
main = (
    [
        test_generate_U64,
        test_generate_bytes,
        test_monad_random,
        test_container,
        TestCase::empty
    ]
    .run_test_driver
);
