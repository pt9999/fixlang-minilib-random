module MonadRandomTest;

import Random;

import Minilib.Monad.Identity;
import Minilib.Monad.Random;
import Minilib.Monad.State;
import Minilib.Monad.IO;
import Minilib.Trait.Rng;
import Minilib.Testing.UnitTest;

test_random_u64: TestCase;
test_random_u64 = (
    make_test("test_random_u64") $ |_|
    let random = Random::init_by_seed(123_U64);
    do {
        let u64_a: U64 = *random_U64;
        let u64_b: U64 = *random_U64;
        println("u64:" + (u64_a, u64_b).to_string).lift_io;;
        // If equal accidentally, change random seed
        assert_true("u64", u64_a != u64_b).lift_iofail;;
        pure()
    }.eval_state_t(random)
);

test_random_u32: TestCase;
test_random_u32 = (
    make_test("test_random_u32") $ |_|
    let random = Random::init_by_seed(124_U64);
    do {
        let u32_a: U32 = *random_U32;
        let u32_b: U32 = *random_U32;
        println("u32:" + (u32_a, u32_b).to_string).lift_io;;
        // If equal accidentally, change random seed
        assert_true("u32", u32_a != u32_b).lift_iofail;;
        pure()
    }.eval_state_t(random)
);

test_random_u16: TestCase;
test_random_u16 = (
    make_test("test_random_u16") $ |_|
    let random = Random::init_by_seed(125_U64);
    do {
        let u16_a: U16 = *random_U16;
        let u16_b: U16 = *random_U16;
        println("u16:" + (u16_a, u16_b).to_string).lift_io;;
        // If equal accidentally, change random seed
        assert_true("u16", u16_a != u16_b).lift_iofail;;
        pure()
    }.eval_state_t(random)
);

test_random_u8: TestCase;
test_random_u8 = (
    make_test("test_random_u8") $ |_|
    let random = Random::init_by_seed(126_U64);
    do {
        let u8_a: U8 = *random_U8;
        let u8_b: U8 = *random_U8;
        println("u8:" + (u8_a, u8_b).to_string).lift_io;;
        // If equal accidentally, change random seed
        assert_true("u8", u8_a != u8_b).lift_iofail;;
        pure()
    }.eval_state_t(random)
);

test_random_I64_range: TestCase;
test_random_I64_range = (
    make_table_test("test_random_I64_range",
        [
            (0, 1),
            (1, 2),
            (10000, 20000),
            (I64::minimum, I64::maximum),
        ],
        |(begin, end)|
        let random = Random::init_by_seed(126_U64);
        do {
            let i64: I64 = *random_I64_range(begin, end);
            println("i64_range="+(begin, end, i64).to_string).lift_io;;
            assert_true("i64", begin <= i64 && i64 < end).lift_iofail;;
            pure()
        }.eval_state_t(random)
    )
);

test_random_bytes: TestCase;
test_random_bytes = (
    make_test("test_random_bytes") $ |_|
    let random = Random::init_by_seed(127_U64);
    do {
        let bytes_a: Array U8 = *random_bytes(4);
        let bytes_b: Array U8 = *random_bytes(4);
        println("bytes:" + (bytes_a, bytes_b).to_string).lift_io;;
        // If equal accidentally, change random seed
        assert_true("bytes", bytes_a != bytes_b).lift_iofail;;
        pure()
    }.eval_state_t(random)
);

test_random_array: TestCase;
test_random_array = (
    make_test("test_random_array") $ |_|
    let random = Random::init_by_seed(128_U64);
    do {
        let size = 1000;
        // same as `random_bytes`, but maybe slower
        let bytes_a: Array U8 = *random_array(size, random_U8);
        let bytes_b: Array U8 = *random_array(size, random_U8);
        //println("bytes:" + (bytes_a, bytes_b).to_string).lift_io;;
        assert_equal("size", size, bytes_a.get_size).lift_iofail;;
        assert_equal("size", size, bytes_b.get_size).lift_iofail;;
        // If equal accidentally, change random seed
        assert_true("bytes", bytes_a != bytes_b).lift_iofail;;
        pure()
    }.eval_state_t(random)
);

test_shuffle: TestCase;
test_shuffle = (
    make_test("test_shuffle") $ |_|
    let random = Random::init_by_seed(128_U64);
    do {
        let n = 10;
        let array = Iterator::range(0, n).to_array;
        let array = *array.shuffle;
        println("array:" + array.to_string).lift_io;;
        assert_equal("size", n, array.get_size).lift_iofail;;
        pure()
    }.eval_state_t(random)
);

type Container = unbox struct {
    title: String,
    random: Random
};

impl Container: Rng {
    type RngResult Container a = Identity a;
    type RngLift Container m a = RngLiftImpl Identity m a;
    rng_U64 = rng_U64.lens_rng(act_random);
    rng_bytes = |size| rng_bytes.lens_rng(act_random);
}

test_container: TestCase;
test_container = (
    make_test("test_container") $ |_|
    let container = Container {
        title: "init",
        random: Random::init_by_seed(123_U64)
    };
    let container: Container = *do {
        mod_state(RngT::mod_data(set_title("started")));;
        let container: Container = (*get_state).run_rng_t;
        assert_equal("title", "started", container.@title).lift_iofail;;
        let u64_a: U64 = *random_U64;
        let u64_b: U64 = *random_U64;
        println("u64:" + (u64_a, u64_b).to_string).lift_io;;
        // If equal accidentally, change random seed
        assert_true("u64", u64_a != u64_b).lift_iofail;;
        mod_state(RngT::mod_data(set_title("finished")));;
        pure()
    }.exec_state_t(container).map(run_rng_t);
    assert_equal("title", "finished", container.@title);;
    pure()
);

main: IO ();
main = (
    [
        test_random_u64,
        test_random_u32,
        test_random_u16,
        test_random_u8,
        test_random_I64_range,
        test_random_bytes,
        test_random_array,
        test_shuffle,
        test_container,
    ]
    .run_test_driver
);

