// Secure random number generator.
//
// Currently only Linux is supported, because it uses `/dev/urandom` as a secure random source.
module Minilib.Crypto.SecureRandom;

import Minilib.Common.Assert;
import Minilib.Monad.IO;
import Minilib.Monad.Random;
import Minilib.Monad.State;
import Minilib.Trait.Rng;

type SecureRandom = unbox struct {
    data: Destructor IOHandle
};

// Creates a SecureRandom instance.
make: IOFail SecureRandom;
make = (
    let handle = *open_file(Path::parse("/dev/urandom").as_some, "r");
    pure $ SecureRandom {
        data: Destructor::make(handle, |handle|
            eval *handle.close_file;
            pure $ handle
        )
    }
);

// Generates a random integer of U64.
generate_U64: SecureRandom -> IOFail (SecureRandom, U64);
generate_U64 = |secure_random| (
    let (secure_random, bytes) = *secure_random.generate_bytes(8);
    let u64: U64 = *from_bytes(bytes).from_result;
    pure $ (secure_random, u64)
);

// Generates a random byte array with specified size.
generate_bytes: I64 -> SecureRandom -> IOFail (SecureRandom, Array U8);
generate_bytes = |size, secure_random| (
    assert_lazy(|_| "invalid size", size >= 0) $ |_|
    let bytes = *secure_random.@data.borrow_io(|handle| read_n_bytes(handle, size).to_result).from_io_result;
    pure $ (secure_random, bytes)
);

impl SecureRandom: Rng {
    type RngResult SecureRandom r = IOFail r;
    type RngLift SecureRandom m a = RngLiftImpl IOFail m a;
    rng_U64 = SecureRandom::generate_U64;
    rng_bytes = SecureRandom::generate_bytes;
}
