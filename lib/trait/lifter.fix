module Minilib.Trait.Lifter;

import Minilib.Monad.Identity;
import Minilib.Monad.IO;

trait lf: Lift {
    type LiftFrom lf;
    type LiftTo lf;
    lifter: lf;
    lift_from: (LiftFrom lf) -> lf -> (LiftTo lf);
}

type [n: * -> *, m: * -> *] Lifter from to = unbox struct {};

impl [m: Monad] Lifter (Identity a) (m a): Lift {
    type LiftFrom (Lifter (Identity a) (m a)) = Identity a;
    type LiftTo (Lifter (Identity a) (m a)) = m a;
    lifter = Lifter{};
    lift_from = |ma, _| pure $ ma.Identity::get;
}

impl [m: MonadIO] Lifter (IO a) (m a): Lift {
    type LiftFrom (Lifter (IO a) (m a)) = IO a;
    type LiftTo (Lifter (IO a) (m a)) = m a;
    lifter = Lifter{};
    lift_from = |ma, _| ma.lift_io;
}

impl [m: MonadIOFail] Lifter (IOFail a) (m a): Lift {
    type LiftFrom (Lifter (IOFail a) (m a)) = IOFail a;
    type LiftTo (Lifter (IOFail a) (m a)) = m a;
    lifter = Lifter{};
    lift_from = |ma, _| ma.lift_iofail;
}
