module Minilib.Trait.Lifter;

import Minilib.Monad.Identity;
import Minilib.Monad.IO;

trait lf: Lifter {
    type LiftFrom lf;
    type LiftTo lf;
    lifter: lf;
    lift_from: (LiftFrom lf) -> lf -> (LiftTo lf);
}

type [n: * -> *, m: * -> *] LifterImpl from to = unbox struct {};

impl [m: Monad] LifterImpl (Identity a) (m a): Lifter {
    type LiftFrom (LifterImpl (Identity a) (m a)) = Identity a;
    type LiftTo (LifterImpl (Identity a) (m a)) = m a;
    lifter = LifterImpl{};
    lift_from = |ma, _| pure $ ma.Identity::get;
}

impl [m: MonadIO] LifterImpl (IO a) (m a): Lifter {
    type LiftFrom (LifterImpl (IO a) (m a)) = IO a;
    type LiftTo (LifterImpl (IO a) (m a)) = m a;
    lifter = LifterImpl{};
    lift_from = |ma, _| ma.lift_io;
}

impl [m: MonadIOFail] LifterImpl (IOFail a) (m a): Lifter {
    type LiftFrom (LifterImpl (IOFail a) (m a)) = IOFail a;
    type LiftTo (LifterImpl (IOFail a) (m a)) = m a;
    lifter = LifterImpl{};
    lift_from = |ma, _| ma.lift_iofail;
}
