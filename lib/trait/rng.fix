// A trait for Random Number Generator.
module Minilib.Trait.Rng;

import Random;
import Minilib.Common.RandomEx;
import Minilib.Functor.Pair;
import Minilib.Monad.Identity;
import Minilib.Monad.State;
import Minilib.Monad.IO;
import Minilib.Trait.Lifter;

// A trait for Random Number Generator.
trait rg: Rng {
    // The result type of `rng_xxx` functions. This should be a monad, for example `Identity a`, `IOFail a` etc.
    // This result will be lifted by the lifter.
    type RngResult rg a;
    // A lifter that lifts `RngResult` into a desired monad.
    // Requirements:
    // - Implements the `Lifter` trait.
    // - `LiftFrom` type must be `RngResult rg a`.
    // - `LiftTo` type must be `m a`.
    // Typically, this type is set to `LifterImpl (n a) (m a)` where `n a` = `RngResult rg a`.
    type [m: * -> *] RngLift rg m a;
    // Generates a random integer of U64.
    rng_U64: rg -> RngResult rg (rg, U64);
    // Generates random bytes of specified size.
    rng_bytes: I64 -> rg -> RngResult rg (rg, Array U8);
}

// Converts a `rng_xxx` function using a lens action.
// Useful for implementing the `Rng` trait for containers that have a member implementing the `Rng` trait.
// For instance, `rng_U64.lens_rng(act_random)` creates an `rng_U64` function that performs the `act_random` action.
// Refer to the `Container` type in `monad_random_test.fix` for a detailed example.
// Note that this function is similar to `State::lens_state_t`.
lens_rng: [rg: Rng, rg2: Rng, f: Functor, RngResult rg a = f a]
    ((rg -> PairLT a f rg) -> (rg2 -> PairLT a f rg2)) ->
    ((rg -> f (rg, a)) -> (rg2 -> f (rg2, a)));
lens_rng = |act, g| act(g >> PairLT::make) >> PairLT::get;

//--------------------------------------------------

// `Random` implements the `Rng` trait
impl Random: Rng {
    type RngResult Random a = Identity a;
    type RngLift Random m a = LifterImpl (Identity a) (m a);
    rng_U64 = |random| pure $ random.generate_U64;
    rng_bytes = |size, random| pure $ random.generate_array(size, generate_U8);
}

