module Minilib.Trait.Rng;

import Random;
import Minilib.Common.RandomEx;
import Minilib.Functor.Pair;
import Minilib.Monad.Identity;
import Minilib.Monad.State;
import Minilib.Monad.IO;

// A trait for Random Number Generator.
trait rg: Rng {
    type RngResult rg a;
    type [m: * -> *] RngLift rg m a;
    // Generates a random integer of U64.
    rng_U64: rg -> RngResult rg (rg, U64);
    // Generates random bytes of specified size.
    rng_bytes: I64 -> rg -> RngResult rg (rg, Array U8);
}

// Convert a `rng_xxx` function with a lens action.
// Useful for implementing the `Rng` trait for a container which contains a member implementing the `Rng` trait.
// For example, `rng_U64.lens_rng(act_random)` is a `rng_U64` function acting with `act_random`.
// For details, see the `Container` type in `monad_random_test.fix`.
// Note that this function somewhat looks like `State::lens_state_t`.
lens_rng: [rg: Rng, rg2: Rng, f: Functor, RngResult rg a = f a]
    ((rg -> PairLT a f rg) -> (rg2 -> PairLT a f rg2)) ->
    ((rg -> f (rg, a)) -> (rg2 -> f (rg2, a)));
lens_rng = |act, g| act(g >> PairLT::make) >> PairLT::get;

//--------------------------------------------------
// A trait for lift result of Random Number Generator.
trait lf: RngLift {
    type RngLiftFrom lf;
    type RngLiftTo lf;
    rng_lift_instance: lf;
    rng_lift: lf -> (RngLiftFrom lf) -> (RngLiftTo lf);
}

type [n: * -> *, m: * -> *] RngLiftImpl n m a = unbox struct {};

impl [m: Monad] RngLiftImpl Identity m a: RngLift {
    type RngLiftFrom (RngLiftImpl Identity m a) = Identity a;
    type RngLiftTo (RngLiftImpl Identity m a) = m a;
    rng_lift_instance = RngLiftImpl{};
    rng_lift = |_| Identity::get >> pure;
}

impl [m: MonadIOFail] RngLiftImpl IOFail m a: RngLift {
    type RngLiftFrom (RngLiftImpl IOFail m a) = IOFail a;
    type RngLiftTo (RngLiftImpl IOFail m a) = m a;
    rng_lift_instance = RngLiftImpl{};
    rng_lift = |_| lift_iofail;
}

//--------------------------------------------------

impl Random: Rng {
    type RngResult Random a = Identity a;
    type RngLift Random m a = RngLiftImpl Identity m a;
    rng_U64 = |random| pure $ random.generate_U64;
    rng_bytes = |size, random| pure $ random.generate_array(size, generate_U8);
}

