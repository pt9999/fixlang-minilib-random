module Minilib.Trait.Rng;

import Random;
import Minilib.Common.RandomEx;
import Minilib.Functor.Pair;
import Minilib.Monad.Identity;
import Minilib.Monad.State;

// A trait for Random Number Generator.
trait rg: Rng {
    type [m: * -> *] RngImplType rg m;
}

// A trait for Implementation of Random Number Generator.
trait rgi: RngImplIF {
    type RngType rgi;
    type RngResult rgi a;
    rgi_instance: rgi;
    // Generates a random integer of U64.
    rng_U64: rgi -> rg -> RngResult rgi (RngType rgi, U64);
    // Generates random bytes of specified size.
    rng_bytes: rgi -> I64 -> rg -> RngResult rgi (RngType rgi, Array U8);
}

type [m: * -> *] RngImpl rg m a = unbox struct {};

impl Random: Rng {
    type RngImplType Random m = RngImpl Random m;
}

impl [m: Monad] RngImpl Random m: RngImplIF {
    type RngType (RngImpl Random m) = Random;
    type RngResult (RngImpl Random m) a = m a;
    rgi_instance = RngImpl{};
    rng_U64 = |rgi, random| pure $ random.generate_U64;
    rng_bytes = |rgi, size, random| pure $ random.generate_array(size, generate_U8);
} 
