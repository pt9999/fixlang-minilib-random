module Minilib.Trait.Rng;

import Random;
import Minilib.Common.RandomEx;
import Minilib.Functor.Pair;
import Minilib.Monad.Identity;
import Minilib.Monad.State;

// A trait for Random Number Generator.
trait rg: Rng {
    type RngResult rg a;
    // Generates a random integer of U64.
    rng_U64: rg -> RngResult rg (rg, U64);
    // Generates random bytes of specified size.
    rng_bytes: I64 -> rg -> RngResult rg (rg, Array U8);
}

// Convert a lens action using PairLT. Useful for containers.
lens_rng: [f: Functor]
    ((a -> PairLT r f a) -> (c -> PairLT r f c)) ->
    ((a -> f (a, r)) -> (c -> f (c, r)));
lens_rng = |act, g| act(g >> PairLT::make) >> PairLT::get;

impl Random: Rng {
    type RngResult Random r = Identity r;
    rng_U64 = |random| pure $ random.generate_U64;
    rng_bytes = |size, random| pure $ random.generate_array(size, generate_U8);
}

type [m: *->*] RngT rg m = unbox struct {
    data: rg,
};

namespace RngT {
    rng_t: [m: *->*] rg -> RngT rg m;
    rng_t = |rg| RngT { data: rg };

    run_rng_t: [m: *->*] RngT rg m -> rg;
    run_rng_t = @data;
}

impl [rg: Rng, m: Monad,
      // can accept any functor insted of Identity ?
      RngResult rg (rg, U64) = Identity (rg, U64),
      RngResult rg (rg, Array U8) = Identity (rg, Array U8)
      ] RngT rg m: Rng {
    type RngResult (RngT rg m) a = m a;
    rng_U64 = |rgt| (
        let (rg, a) = Identity::get $ rgt.run_rng_t.rng_U64;
        pure $ (rng_t(rg), a)
    );
    rng_bytes = |size, rgt| (
        let (rg, a) = Identity::get $ rgt.run_rng_t.rng_bytes(size);
        pure $ (rng_t(rg), a)
    );
}
