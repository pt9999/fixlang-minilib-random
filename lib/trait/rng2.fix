module Minilib.Trait.Rng;

import Random;
import Minilib.Common.RandomEx;
import Minilib.Functor.Pair;
import Minilib.Monad.Identity;
import Minilib.Monad.State;

// A trait for Random Number Generator.
trait rg: Rng {
    type RngType rg;
    type RngResult rg a;
    // Generates a random integer of U64.
    rng_U64: rg -> RngResult rg (RngType rg, U64);
    // Generates random bytes of specified size.
    rng_bytes: I64 -> rg -> RngResult rg (RngType rg, Array U8);
}

type [m: * -> *] RngImpl rg m a = unbox struct {}

trait [m: Monad] RngImpl Random m: Rng {
    type RngType (RngImpl Random m) = SecureRandom;
    type RngResult (RngImpl Random m) a = m a;
    rng_U64 = |random| pure $ random.generate_U64;
    rng_bytes = |size, random| pure $ random.generate_array(size, generate_U8);
} 

trait [m: MonadIOFail] RngImpl SecureRandom m: Rng {
    type RngType (RngImpl SecureRandom m) = SecureRandom;
    type RngResult (RngImpl SecureRandom m) a = m a;
    rng_U64 = SecureRandom::generate_U64 >> lift_iofail;
    rng_bytes = SecureRandom::generate_bytes >> lift_iofail;
} 

