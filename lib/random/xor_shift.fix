module Minilib.Random.XorShift;

import Minilib.Monad.Identity;
import Minilib.Trait.Rng;
import Minilib.Trait.Lifter;

type XorShift = unbox struct {
    data: U64
};

init_by_seed: U64 -> XorShift;
init_by_seed = |seed| (
    let probable_prime = 0xe6ddec0e9bc49561_U64; // generated by probable_primes
    XorShift {
        data: seed * probable_prime
    }
);

impl XorShift: Rng {
    type RngResult XorShift a = Identity a;
    type RngLift XorShift m a = LifterImpl (Identity a) (m a);
    rng_U64 = |xor_shift| (
        let x = xor_shift.@data;
        let x = x.bit_xor(x.shift_left(13_U64));
        let x = x.bit_xor(x.shift_right(7_U64));
        let x = x.bit_xor(x.shift_left(17_U64));
        let xor_shift = xor_shift.set_data(x);
        pure $ (xor_shift, x)
    );
    rng_bytes = |size, xor_shift| (
        let bytes: Array U8 = Array::fill(size, 0_U8);
        loop(
            (xor_shift, bytes, 0_U64, 0), |(xor_shift, bytes, x, i)|
            if i >= size {
                break $ pure $ (xor_shift, bytes)
            };
            if i.bit_and(7) == 0 {
                let (xor_shift, x) = xor_shift.rng_U64.get;
                let bytes = bytes.set(i, x.to_U8);
                let x = x.shift_right(8_U64);
                continue $ (xor_shift, bytes, x, i + 1)
            } else {
                let bytes = bytes.set(i, x.to_U8);
                let x = x.shift_right(8_U64);
                continue $ (xor_shift, bytes, x, i + 1)
            }
        )
    );
}