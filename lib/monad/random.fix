// Random Number Generator Monad
module Minilib.Monad.Random;

import Random;

import Minilib.Monad.Identity;
import Minilib.Monad.State;
import Minilib.Trait.Rng;

trait MonadRandom = Functor + Monad + MonadRandomIF;

// A trait for a monad that generates random numbers every time.
trait [m: * -> *] m: MonadRandomIF {
    // `random_U64` generates a random integer of U64.
    random_U64: m U64;
    // `random_bytes` generates random bytes of specified size.
    random_bytes: I64 -> m (Array U8);
}

impl [m: Monad, rng: Rng,
        RngResult rng (rng, U64) = m (rng, U64),
        RngResult rng (rng, Array U8) = m (rng, Array U8)]
    StateT rng m: MonadRandomIF {
    random_U64 = make_state_t_monad $ rng_U64;
    random_bytes = |size| make_state_t_monad $ rng_bytes(size);
}

// `random_U32` generates a random integer of U32.
random_U32: [m: MonadRandom] m U32;
random_U32 = random_U64.map(to_U32);

// `random_U16` generates a random integer of U8.
random_U16: [m: MonadRandom] m U16;
random_U16 = random_U64.map(to_U16);

// `random_U8` generates a random integer of U8.
random_U8: [m: MonadRandom] m U8;
random_U8 = random_U64.map(to_U8);

// `random_array(size, random)` generates a random array of specified size
// by performing `random` repeatedly.
random_array: [m: Monad] I64 -> m a -> m (Array a);
random_array = |size, random| (
    loop_m(
        (Array::empty(size), 0), |(array, i)|
        if i >= size { break_m $ array };
        let array = array.push_back(*random);
        continue_m $ (array, i + 1)
    )
);
