// Random Number Generator Monad
module Minilib.Monad.Random;

import Random;

import Minilib.Monad.Identity;
import Minilib.Monad.State;
import Minilib.Trait.Rng;

trait MonadRandom = Functor + Monad + MonadRandomIF;

// A trait for a monad that generates random numbers every time.
trait [m: * -> *] m: MonadRandomIF {
    // `random_U64` generates a random integer of U64.
    random_U64: m U64;
    // `random_bytes` generates random bytes of specified size.
    random_bytes: I64 -> m (Array U8);
}

/*
act1: [m: Monad, rg: Rng, lf: RngLift,
    RngLift rg m = lf,
    RngLiftFrom lf (rg, U64) = resu64,
    RngResult rg (rg, U64) = resu64,
    RngLiftTo lf (rg, U64) = m (rg, U64),
    RngLiftFrom lf (rg, Array U8) = resbytes,
    RngResult rg (rg, Array U8) = resbytes,
    RngLiftTo lf (rg, Array U8) = m (rg, Array U8)
    ]
    rg -> RngLiftTo lf (rg, U64);
act1 = |rng: rg| (
            let res: RngResult rg (rg, U64) = rng_U64(rng);
            let res: RngLiftTo lf (rg, U64) = rng_lift(rng_lift_instance: lf)(res);
            res
        );
*/

impl [rg: Rng,
    lf1: RngLift,
    RngLift rg m (rg, U64) = lf1,
    RngResult rg (rg, U64) = from1,
    RngLiftFrom lf1 = from1,
    RngLiftTo lf1 = m (rg, U64),
    /*
    RngLiftFrom lf (rg, Array U8) = resbytes,
    RngResult rg (rg, Array U8) = resbytes,
    RngLiftTo lf (rg, Array U8) = m (rg, Array U8)
    */
    m: Monad
    ]
    StateT rg m: MonadRandomIF {
    random_U64 = (
        //let lif: lf1 -> RngLiftFrom lf1 -> RngLiftTo lf1 = rng_lift;
        //let lif: RngLiftFrom lf1 -> RngLiftTo lf1 = rng_lift(rng_lift_instance: lf1);
        let act1: rg -> RngLiftTo lf1 = |rng: rg| (
            let res: RngResult rg (rg, U64) = rng_U64(rng);
            //let lif: RngLiftFrom lf (rg, U64) -> RngLiftTo lf (rg, U64) = rng_lift(rng_lift_instance: lf);
            let res: RngLiftTo lf1 =
                (RngLift::rng_lift: lf1 -> RngLiftFrom lf1 -> RngLiftTo lf1)
                (rng_lift_instance: lf1, res);
            res //undefined("") //res
        );
        undefined("")
    );
        /*
        let act1: rg -> RngLiftTo lf (rg, U64) = |rng: rg| (
            let res: RngResult rg (rg, U64) = rng_U64(rng);
            //let lif: RngLiftFrom lf (rg, U64) -> RngLiftTo lf (rg, U64) = rng_lift(rng_lift_instance: lf);
            //let res: RngLiftTo lf (rg, U64) = rng_lift(rng_lift_instance: lf)(res);
            undefined("") //res
        );
        */
        /*

        let act: rg -> RngLiftTo lf (rg, U64)
        = |rng: rg| (
            let res: RngResult rg (rg, U64) = rng_U64(rng);
            let res: RngLiftTo lf (rg, U64) = rng_lift(rng_lift_instance: lf)(res);
            res
        );
        let act: rg -> m (rg, U64) = act;
        make_state_t_monad $ act
        */
    //random_bytes = |size| make_state_t_monad $ rng_bytes(size) >> rng_lift(rng_lift_instance: lf);
    random_bytes = undefined("");
}

// `random_U32` generates a random integer of U32.
random_U32: [m: MonadRandom] m U32;
random_U32 = random_U64.map(to_U32);

// `random_U16` generates a random integer of U8.
random_U16: [m: MonadRandom] m U16;
random_U16 = random_U64.map(to_U16);

// `random_U8` generates a random integer of U8.
random_U8: [m: MonadRandom] m U8;
random_U8 = random_U64.map(to_U8);

// `random_I64_range(begin, end)` generates a random integer `r`
// such that `begin <= r && r < end`.
// if `begin >= end`, it panicks.
random_I64_range: [m: MonadRandom] I64 -> I64 -> m I64;
random_I64_range = |begin, end| (
    if !(begin < end) { undefined("random_I64_range: begin >= end") };
    let n = (end - begin).to_U64;
    let r = *random_U64;
    let r = r / (U64::maximum / n);
    if r >= n {
        random_I64_range(begin, end)  // try again
    };
    let r = r.to_I64 + begin;
    pure $ r
);

// `random_array(size, random)` generates a random array of specified size
// by performing `random` repeatedly.
random_array: [m: MonadRandom] I64 -> m a -> m (Array a);
random_array = |size, random| (
    loop_m(
        (Array::empty(size), 0), |(array, i)|
        if i >= size { break_m $ array };
        let array = array.push_back(*random);
        continue_m $ (array, i + 1)
    )
);

shuffle: [m: MonadRandom] Array a -> m (Array a);
shuffle = |array| (
    loop_m(
        (array, array.get_size - 1), |(array, i)|
        if i <= 0 {
            break_m $ (array)
        };
        let j = *random_U64;
        let j = (j % (i + 1).to_U64).to_I64;
        let tmp = array.@(i);
        let array = array.set(i, array.@(j));
        let array = array.set(j, tmp);
        continue_m $ (array, i - 1)
    )
);
